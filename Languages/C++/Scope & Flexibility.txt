The Scope of Things:
Scope is the region of code that can access or view a given element.
Variables defined in global scope are accessible throughout the program.
Variables defined in a function have local scope and are only accessible inside the function.

Multi-File Programs:
When our programs scale, we can declare the function, and then define the function after.
We declare functions above main and the define below main.

This isn't ideal though as our code gets longer.
It's common to use the same function in more than one .cpp file.
To make our code cleaner and more modular, we can mvoe the function definitions over to another specialized .cpp file, leaving a list of declaration above main().
Files, like functions, have scope, and for the compiler to know, the compiler links together any files we list in our compilation statement into a single executable file:
g++ main.cpp my_functions.cpp

Getting a Header Yourself:
As our program keeps growing, we may have to scroll through many declarations.
Instead, we can take these functio ndeclarations and move them all over to a header file, another file, usually with the same name as the file with all of the function definitions, with the extension .hpp or .h.
For example, if our function definitions are in my_funcitons.cpp, the corresponding header file would be my_functions.hpp or my_functions.h.

With headers, we can just add #include "my_functions.hpp" to the very top of main.cpp.
#include "my_functions.hpp"
This line will then paste in everything from my_functions.hpp.

How To Get Our Functions Inline:
An inline function is a function definition, usually in a header file, qualified by inline like this:
inline
void eat() {
	std::cout << "nom nom\n";
}

Using inline advises the compiler to insert the function's body where the function call is, which sometimes helps with the execution speed (and sometimes hinders execution speed)
Inline is something we'll encounter but may never use.

We will sometimes hear about "inline functions" that are just member functions (functions inside of classes) which have been defined and declared in a single line in a header file because the function body is so short:
// cookie_functions.hpp

// eat() belongs to the Cookie class:
void Cookie:eat() {std::cout << "nom nom\n";}

We should always add the inline keyword if we are inlining functions in a header(unless we are dealing with member functions, which are automatically inlined for us).

Default Arguments:
To make our code more flexible, we can add default arguments to our function declaration.
Default arguments are values assigned to parameters when the function is declared and defined.
Example:
// Declaration
void intro(std::string name, std::string lang = "C++");
 
// Definition
void intro(std::string name, std::string lang) {
  std::cout << "Hi, my name is "
            << name
            << " and I'm learning "
            << lang
            << ".\n";
}

if we leave the argument blank in our function call, instead of an error, our function will run with the default value.
If we do have an argument, the argument will replace the default argument when it runs.

Important: If a function has two default arguments, we need to call with both arguments as our compiler executes parameters based on order.

Function Overload:
In a process known as function overloading, we can give multiple C++ functions the same name.
We just make sure at least one of these conditions are true:
Each has different type parameters.
Each has a different number of parameters.

Overloading enables us to change the way a function behaves depending on what is passed in as an argument.
Example:
void print_cat_ears(char let) {
  std::cout << " " << let << "   " << let << " " << "\n";
  std::cout << let << let << let << " " << let << let << let << "\n";
}
 
void print_cat_ears(int num) {
  std::cout << " " << num << "   " << num << " " << "\n";
  std::cout << num << num << num << " " << num << num << num << "\n";
}

Function Templates:
When two functions have different types but the same body, we can use templates.
A template is a C++ tool that allows programmers to add data types as parameters.
This feature comes in handy for classes as well.
In fact, std::string and std::vector are both template-based types.

How to Build Function Templates:
Unlike regular functions, templates are entirely created in header files.
Templates let us choose the type implementation right when we call the function.
The type we choose may apply to the return type, a parameter type, or both.

Example:
template <typename T>
void print_cat_ears(T item) {
 
  std::cout << " " << item << "   " << item << " " << "\n";
  std::cout << item << item << item << " " << item << item << item << "\n";
 
}

We can pass in any type as long as the methods work with the type specified.
Note: Using templates will slow down the program's compile time, but speed up the execution time.

Review:
Scope is the region of code that has access to an element:
    Globally scoped variables are accessible everywhere
    A variable created inside a function has local scope and can't be accessed outside the function.
C++ functions are usually split to make code more modular:
    The declaration in a header file.
    The definition in another .cpp file.
Programs with multiple .cpp files need to be linked at compile time:
    g++ main.cpp fns.cpp
Header files must be included in the file with main:
    #include "fns.hpp"
We can define a function inline using the inline keyword, which may or may not improve execution speed.
Default arguments can be added to function declarations so that we can call the function without including those arguments.
We can overload C++ functions so that they handle different types of input and return different types.
A function template enables a function to behave the same with different types of parameters.

