Code -> Save -> Compile -> Execute:
C++ is a compiled language, which means that to get a C++ program to run, we must first translate it from a human-readable form to something a machine can "understand." That translation is done by a program called a compiler.
When we program in C++, we mainly go through 4 phases during development:
1. Code - writing the program
2. Save - saving the program
3. Compile - compiling via the terminal
4. Execute - executing via the terminal

We debug errors if needed.

Compile and Execute:
Compile: A computer can only understand machine code. A compiler can translate the C++ programs that we write into machine code.
We call this compiler by using the terminal or any IDE.
To compile a file in the terminal, we type g++ followed by the file name.
This will then translate the C++ program and create a machine code file called a.out.

Execute: To execute the new machine code file, all we need to do is type ./ and the machine code file name in the terminal.
The executable file will then be loaded to copmuter memory and the computer's CPU (Central Processing Unit) executes the program one instruction at a time.

Compile and Execute (Naming Executables)
Compile: Sometimes when we compile, we want to give the output executable file a specific name.
To do so, the compile command is slightly different.
We still need to write g++ and the file name in the terminal.
After that, there should be -o and then the name we want to give to the executable file:
Example:
g++ hello.cpp -o hello

The compiler will then translate the C++ program hello.cpp and create a machine code file called hello.

Execute: to execute the new machine code file, all we need to do s type ./ and the machine code file name.

Comments:
There are two types of code comments in C++:
A single line comment which is done with //
A multi-line comment that starts with /* and ends with */

Review:
Compilation and execution using the terminal:
g++ hello.cpp -o hello
./hello

Single line comments : //
Multi-line comments : /* */